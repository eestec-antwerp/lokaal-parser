#!/usr/bin/python3

# Author:    Evert Heylen
# License:   WTFPL
# Depencies: selenium (and python bindings), python-icalendar and firefox.

# Why selenium and not a simple html parser? I know selenium's workings now, so I'm too lazy to learn
# another way. And lokaal-parser really asked for something like selenium.

from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait # available since 2.4.0
from selenium.webdriver.support import expected_conditions as EC # available since 2.26.0
from selenium.common.exceptions import *

from icalendar import Calendar, Event

from datetime import *
from time import *  # sleep, strptime


# ----[ Settings ]-------------------------------------

url = input("Url: ")
first_year = 2015  # - 2016

filename = input("Filename (without extension)? ") + ".ics"

# -----------------------------------------------------

def main():
    # initialize the calendar
    cal = Calendar()
    cal.add("summary", "Generated by modelroosters-parser, made by Evert Heylen.")
    cal.add('prodid', '-//modelroosters-parser//evertheylen.appspot.com//')
    cal.add('version', '2.0')
    
    # init webdriver
    br = webdriver.Firefox()
    br.implicitly_wait(2)
    br.get(url)
    
    for week in range(1,35):  # ???
    # week is more like the number of the a element you have to click to get to the next week.
    # weeks 14-20 are not on the calendar, but the dividers don't care, so week=14 ==> actual week=21
        try:
            # //*[@id="ContentPlaceHolder1_ctl00_ctl01_div_Omkadering"]/section/div[1]/ul/li[{week}]/a
            week_el = br.find_element_by_xpath('//*[@id="ContentPlaceHolder1_ctl00_ctl01_div_Omkadering"]/section/div[1]/ul/li[{0}]/a'.format(week))
            week_el.click()
            sleep(1)
            
            for day in range(1,6):  # 1 to 5, no lessons during weekends
                try:
                    # //*[@id="ContentPlaceHolder1_ctl00_ctl01_div_Omkadering"]/section/div[2]/div[{day}]/span
                    day_el = br.find_element_by_xpath('//*[@id="ContentPlaceHolder1_ctl00_ctl01_div_Omkadering"]/section/div[2]/div[{0}]/span'.format(day))
                    
                    current_day = text_to_date(day_el.text)
                    
                    for row in range(1,100):  # BUG will not work for more than 99 lessons a day :)
                        try:
                            start_el = br.find_element_by_xpath('//*[@id="ContentPlaceHolder1_ctl00_ctl01_div_Omkadering"]/section/div[2]/table[{1}]/tbody/tr[{0}]/td[1]'.format(row, day))
                            end_el = br.find_element_by_xpath('//*[@id="ContentPlaceHolder1_ctl00_ctl01_div_Omkadering"]/section/div[2]/table[{1}]/tbody/tr[{0}]/td[2]'.format(row, day))
                            summ = br.find_element_by_xpath('//*[@id="ContentPlaceHolder1_ctl00_ctl01_div_Omkadering"]/section/div[2]/table[{1}]/tbody/tr[{0}]'.format(row, day)).text
                            summ = "\n".join(summ.split('\n')[1:])
                            
                            start = strptime(start_el.text, "%H:%M")
                            end = strptime(end_el.text, "%H:%M")
                            
                            # Create new event
                            event = Event()
                            event.add('dtstart', datetime(current_day.year, current_day.month, current_day.day,
                                                          start.tm_hour, start.tm_min))
                            event.add('dtend', datetime(current_day.year, current_day.month, current_day.day,
                                                          end.tm_hour, end.tm_min))
                            event.add('summary', summ)
                            cal.add_component(event)
                            
                        except NoSuchElementException as e:
                            break
                    
                    #print(current_day)
                    
                except NoSuchElementException as e:
                    print("skipping day %d."%day)
            
        except NoSuchElementException as e:
            print("skipping week %d."%week)
        
    br.close()
        
    f = open(filename, 'wb')
    f.write(cal.to_ical())
    f.close()
    print("Written file to %s"%filename)
    
    print("All done!")


months = {
    "sep": 9,
    "okt": 10,
    "nov": 11,
    "dec": 12,
    "jan": 1,
    "feb": 2,
    "mrt": 3,
    "apr": 4,
    "mei": 5,
    "jun": 6,
    "jul": 7,
    "aug": 8
}

def text_to_date(text):
    global first_year
    year = first_year
    
    text = text.split('\n')
    month = months[text[1].lower()]
    day = int(text[0])
    if month <= 8:  # under august
        year += 1
    
    return datetime(year, month, day)

if __name__=="__main__":
    main()
